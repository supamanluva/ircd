name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report-${{ matrix.go-version }}
        path: coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Build
      run: |
        mkdir -p bin
        go build -v -o bin/ircd ./cmd/ircd
    
    - name: Test binary
      run: |
        ./bin/ircd -version || echo "Version flag not implemented yet"
        file bin/ircd
        ls -lh bin/ircd
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ircd-linux-amd64
        path: bin/ircd

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Build
      run: make build
    
    - name: Generate test certificates
      run: ./generate_cert.sh
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run Phase 2 tests
      run: bash test_simple_phase2.sh || true
    
    - name: Run Phase 3 tests
      run: bash tests/test_phase3.sh || true
    
    - name: Run Phase 4 tests
      run: bash tests/test_phase4.sh || true
    
    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs
        path: logs/
